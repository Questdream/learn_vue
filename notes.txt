1.使用vue的两种方式
    直接引入vue.js文件
        对于制作原型或学习，你可以这样使用最新版本：
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>

    基于Node环境创建Vue项目（使用vue/cli创建初始化一个vue项目)
        npm install -g @vue/cli
        vue create 项目名称
        npm run serve
    
    补充：先安装node，在安装node的时候，npm也同时安装

2.元素和vue对象绑定
    绑定文本： {{}}
    绑定属性： v-bind(:)
    绑定事件（事件修饰符）：v-on(@)

3.组件化开发概述
    大家可以吧组件理解成一个可以自定义的强大功能的标签
        链接：html的a标签
        登录：.vue组件，登录
        轮播图：.vue组件，轮播图


三 模板语法
    v-if
    v-show
    v-for

    组件嵌套
        组件命名：大写字母开头，驼峰命名
        注册组件
        组件传值

四 组件传值
    组件之间的关系
    1.父级向子级传递数据  
        使用属性传值
    2.子级向父级传递数据
        使用自定义事件
    3.非父子级传递数据
        定义一个共享数据的状态（state）

    总结：
        将系统拆分成组件，一方面降低了功能的耦合，但另一方面也提升了数据传输难度。
        这里的利弊得失需要大家在项目中不断摸索

五 计算属性和侦听器
    computed：计算属性
        data属性和computed属性定义的值都可以直接绑定在表达式中，如果某些值需要通过计算得到的，那就使用计算属性
        name = firstName+lastName

    watch：侦听器（监听器）
        侦听一个属性的变化


    对比：一个值的改变，会影响多个值，使用侦听器
            多个值的改变，为了一个结果，使用计算属性。
            实际开发中，大部分问题都能使用computed解决。
六 生命周期钩子
    作用：页面加载时，主动执行某些程序。

    method:{
        getData(){
            //do ajax
        }
    }

    vue 实例
        new Vue()创建一个Vue实例
        所有组件其实都是Vue实例

    Vue实例的生命周期钩子（函数）
        每个Vue实例在被创建时都要经过一系列初始化过程。
        created()组件初始化完成
        mounted()模板已创建

七 三个知识点
    插槽
        让我们更加灵活的使用组件，增强组件的扩展性。比如，如何实现按钮中文本的自定义，可以通过属性传值，也可以通过插槽实现。
    <slot></slot>
    具名插槽
    <slot name=""></slot>
    插槽在项目中的作用：
    1.创建更加灵活，易扩展组件：自定义button，table等
    2.开发或使用UI库，了解组价制作原理

    后续学习的ElementUI的组件基本上都是基于插槽实现的。

    DOM操作
    DOM: 文档对象模型
    DOM节点：元素节点，属性节点，文本节点。
    通过操作DOM实现页面效果：jQuery
    $("h1").text("hello world")

    虚拟DOM
        Vue中的数据变化，并不是直接改变DOM，而是通过改变虚拟DOM，并计算变更差异，进而修改DOM中有变化的内容
    
    获取元素样式
    //方法可以获取元素的样式
    window.getComputedStyle(element).width

    Vue应用开发过程中大部分情况是不需要啊获取真实DOM的，不要吧jQuery的思想带到Vue里来

    过滤器

        通过固定算法重新组织数据

八 表单
    1.通过表单可以向服务器发送数据
    2.常用表单控件包括：
        文本输入框
        密码输入框
        下拉菜单
        单选框
        复选框
        提交按钮
        ...

    数据双向绑定
        通过v-model指令在文本输入框中创建双向数据绑定。

九 数据交互
    http协议：前端（浏览器）发送请求，服务器给予响应。
    请求方法：get（查询），post（添加），put（修改），delete（删除）
    ajax：不刷新页面与后台交互数据
    axios：封装好的ajax模块
    koa：基于node的web框架

    初始化Vue项目
    1.创建Vue项目
    2.npm install -save axios
    3.import axios from axios
